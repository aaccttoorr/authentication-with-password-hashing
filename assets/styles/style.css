/**
  Нормализация блочной модели
 */
*,
::before,
::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/**
  Убираем внутренние отступы слева тегам списков,
  у которых есть атрибут class
 */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
  Убираем внешние отступы body и двум другим тегам,
  у которых есть атрибут class
 */
body,
:where(blockquote, figure, fieldset):where([class]) {
  margin: 0;
}

/**
  Убираем внешние отступы вертикали нужным тегам,
  у которых есть атрибут class
 */
:where(
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  ul,
  ol,
  dl
):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  padding: 0;
  border: none;
}

/**
  Убираем стандартный маркер маркированному списку,
  у которого есть атрибут class
 */
:where(ul[class]) {
  list-style: none;
}

:where(address[class]) {
  font-style: normal;
}

/**
  Обнуляем вертикальные внешние отступы параграфа
 */
p {
  margin-block: 0;
}

/**
  Упрощаем работу с изображениями и видео
 */
img,
video {
  display: block;
  max-width: 100%;
  height: auto;
}

/**
  Наследуем свойства шрифт для полей ввода
 */
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  height: 100%;
  /**
    Убираем скачок интерфейса по горизонтали
    при появлении / исчезновении скроллбара
   */
  scrollbar-gutter: stable;
}

/**
  Плавный скролл
 */
html {
  scroll-behavior: smooth;
}

body {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  min-height: 100%;
  /**
    Унифицированный интерлиньяж
   */
  line-height: 1.5;
}

/**
  Нормализация высоты элемента ссылки при его инспектировании в DevTools
 */
a:where([class]) {
  display: inline-flex;
}

/**
  Курсор-рука при наведении на элемент
 */
button,
label {
  cursor: pointer;
}

/**
  Приводим к единому цвету svg-элементы
  (за исключением тех, у которых уже указан
  атрибут fill со значением 'none' или начинается с 'url')
 */
:where([fill]:not(
  [fill="none"],
  [fill^="url"]
)) {
  fill: currentColor;
}

/**
  Приводим к единому цвету svg-элементы
  (за исключением тех, у которых уже указан
  атрибут stroke со значением 'none')
 */
:where([stroke]:not(
  [stroke="none"],
  [stroke^="url"]
)) {
  stroke: currentColor;
}

/**
  Чиним баг задержки смены цвета при взаимодействии с svg-элементами
 */
svg * {
  transition-property: fill, stroke;
}

/**
  Приведение рамок таблиц в классический 'collapse' вид
 */
:where(table) {
  border-collapse: collapse;
  border-color: currentColor;
}

body {
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  font-family: 'Arial', sans-serif;
  font-size: 16px;
  color: #101010;
  background-color: #f6f5f7;
}

.authentication {
  max-width: 1320px;
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  row-gap: 30px;
  padding-inline: 20px;
  margin: 0 auto;
}


.authentication__message {
  position: fixed;
  top: 20px;
  left: 20px;
  padding: 12px 16px;
  border-radius: 6px;
  text-align: center;
  font-size: 14px;
  font-weight: 500;
  min-height: 20px;
  transform: translateX(-300%);
  transition: all 0.3s ease;
  background-color: #e0e0dd;

  &::before {
    position: absolute;
    content: '';
    left: 0;
    top: 0;
    width: 4px;
    height: 100%;
    background-color: #FF4B2B;
  }
}

.authentication__message.is-visible {
  transform: translateX(0);
}

.authentication__message--error {
  &::before {
    background-color: darkred;
  }
}

.authentication__title {
  font-size: 24px;
  text-align: center;
}

.authentication__forms {
  display: flex;
  align-items: stretch;
  column-gap: 30px;
}

.authentication__registration,
.authentication__authorization {
  width: 50%;
}

.form {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  row-gap: 10px;
  background-color: #ffffff;
  border-radius: 12px;
  box-shadow: 0 10px 10px rgba(0, 0, 0, 0.22);
  padding: 30px 50px;
}

.form__control {
  display: flex;
  flex-direction: column;
  align-items: start;
  row-gap: 5px;
}

.form__control:not(.form__control:first-child) {
  margin-bottom: 15px;
}

.form__label {
  transition: color 0.2s ease;
}

.form__label:hover {
  color: #FF4B2B;
}

.form__input {
  height: 40px;
  outline: 1px solid #101010;
  border: none;
  border-radius: 4px;
  padding-inline: 15px;
  transition: outline-color 0.2s ease;
}

.form__input:hover, .form__input:focus {
  outline-color: #FF4B2B;
}

.form__button {
  font-size: 12px;
  font-weight: bold;
  letter-spacing: 1px;
  text-transform: uppercase;
  color: #FFFFFF;
  background-color: #FF4B2B;
  border-radius: 12px;
  border: 1px solid #FF4B2B;
  padding: 10px;
  transition: all 0.2s ease;
}

.form__button:hover {
  color: #FF4B2B;
  background-color: #f6f5f7;
}

@media (max-width: 768px) {
  .authentication__forms {
    flex-direction: column;
    row-gap: 30px;
  }

  .authentication__registration,
  .authentication__authorization {
    width: auto;
  }
}

.user-info {
  display: flex;
  flex-direction: column;
  row-gap: 15px;
}